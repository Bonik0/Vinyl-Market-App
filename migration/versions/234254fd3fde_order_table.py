"""order_table

Revision ID: 234254fd3fde
Revises: 8ce17f973ece
Create Date: 2024-12-17 00:36:02.816598

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from migration.TableInit import TableInit
from core.models.postgres import OrderStatus

# revision identifiers, used by Alembic.
revision: str = '234254fd3fde'
down_revision: Union[str, None] = '8ce17f973ece'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None



def upgrade() -> None:
    op.execute(
        """
        CREATE TYPE order_status AS ENUM ('created', 'assembled', 'in_delivery', 'delivered', 'canceled');  
        """
    )
    op.execute(
        """
        CREATE TABLE orders (
            id INTEGER GENERATED BY DEFAULT AS IDENTITY,
            user_id INTEGER,
            vinyl_record_id INTEGER,
            status order_status DEFAULT 'created',
            created_at TIMESTAMP DEFAULT current_timestamp,
            PRIMARY KEY (id, user_id, vinyl_record_id),
            FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
            FOREIGN KEY (vinyl_record_id) REFERENCES vinyl_records (id) ON DELETE CASCADE
        );  
        """
    )
    orders_columns_types = {
        'user_id' : int,
        'vinyl_record_id' : int,
        'status' : OrderStatus
    }
    orders = TableInit.parse_data('./migration/versions/csv_data/orders.csv', orders_columns_types)
    for order in orders:
        op.execute(
            sa.text("INSERT INTO orders (user_id, vinyl_record_id, status) VALUES (:user_id, :vinyl_record_id, :status)").params(order)
        )
    
    op.execute(
        """
        CREATE FUNCTION update_user_bucket_and_vinyl_quantity()
        RETURNS TRIGGER AS $create_order$
            BEGIN
                
                IF EXISTS (
                        SELECT * FROM vinyl_records WHERE quantity > 0 AND id = NEW.vinyl_record_id FOR NO KEY UPDATE
                    )
                THEN
                    UPDATE vinyl_records
                    SET quantity = quantity - 1
                    WHERE quantity > 0 AND id = NEW.vinyl_record_id;
                    
                    DELETE FROM bucket
                    WHERE vinyl_record_id = NEW.vinyl_record_id AND user_id = NEW.user_id;
                        
                    RETURN NEW;
                END IF;
                
                RAISE EXCEPTION 'quantity less one';
            END;
        $create_order$ language plpgsql;
        """
    )
    op.execute(
        """ CREATE TRIGGER create_order
            BEFORE INSERT ON orders
            FOR EACH ROW 
            EXECUTE FUNCTION update_user_bucket_and_vinyl_quantity();
        """
    )
    op.execute(
        """
        CREATE FUNCTION next_order_status(stat order_status)
        RETURNS order_status
                AS $$
                BEGIN
                RETURN (
                    CASE 
                    WHEN stat = 'created'::order_status THEN 'assembled'::order_status
                    WHEN stat = 'assembled'::order_status THEN 'in_delivery'::order_status
                    WHEN stat = 'in_delivery'::order_status THEN 'delivered'::order_status
                    ELSE stat
                END
                );
end
$$ language plpgsql;
        """
    )
    op.execute(
    """
        CREATE VIEW vinyl_record_orders AS
        SELECT  orders.id AS order_id,
                orders.user_id AS user_id,
                orders.status AS status,
                orders.created_at AS created_at,
                orders.vinyl_record_id AS vinyl_record_id,
                vinyl_records.seller_id AS seller_id,
                vinyl_records.release_date AS release_date, 
                vinyl_records.title AS title, 
                vinyl_records.UPC AS UPC, 
                vinyl_records.image_url AS image_url, 
                vinyl_records.price AS price
        FROM orders
        INNER JOIN vinyl_records ON vinyl_records.id = orders.vinyl_record_id
        ORDER BY orders.created_at DESC, orders.id DESC;
    """
    )
    
    
    



def downgrade() -> None:
    op.execute(
        """
        DROP VIEW vinyl_record_orders;
        """
    )
    op.execute(
        """
        DROP FUNCTION next_order_status(stat order_status);
        """
    )
    op.execute(
        """
        DROP TYPE order_status CASCADE;
        """
    )
    op.execute(
        """
        DROP TRIGGER create_order ON orders;
        """
    )
    op.execute(
        """
        DROP FUNCTION update_user_bucket_and_vinyl_quantity();
        """
    )
    op.execute(
        """
        DROP TABLE orders;
        """
    )